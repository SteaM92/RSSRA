package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.RssFeed;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RSS_FEED.
*/
public class RssFeedDao extends AbstractDao<RssFeed, Long> {

    public static final String TABLENAME = "RSS_FEED";

    /**
     * Properties of entity RssFeed.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Source = new Property(1, String.class, "source", false, "SOURCE");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Link = new Property(4, String.class, "link", false, "LINK");
        public final static Property Language = new Property(5, String.class, "language", false, "LANGUAGE");
        public final static Property Copyright = new Property(6, String.class, "copyright", false, "COPYRIGHT");
        public final static Property PubDate = new Property(7, java.util.Date.class, "pubDate", false, "PUB_DATE");
    };

    private DaoSession daoSession;


    public RssFeedDao(DaoConfig config) {
        super(config);
    }
    
    public RssFeedDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RSS_FEED' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SOURCE' TEXT," + // 1: source
                "'TITLE' TEXT," + // 2: title
                "'DESCRIPTION' TEXT," + // 3: description
                "'LINK' TEXT," + // 4: link
                "'LANGUAGE' TEXT," + // 5: language
                "'COPYRIGHT' TEXT," + // 6: copyright
                "'PUB_DATE' INTEGER);"); // 7: pubDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RSS_FEED'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RssFeed entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(2, source);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(5, link);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(6, language);
        }
 
        String copyright = entity.getCopyright();
        if (copyright != null) {
            stmt.bindString(7, copyright);
        }
 
        java.util.Date pubDate = entity.getPubDate();
        if (pubDate != null) {
            stmt.bindLong(8, pubDate.getTime());
        }
    }

    @Override
    protected void attachEntity(RssFeed entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RssFeed readEntity(Cursor cursor, int offset) {
        RssFeed entity = new RssFeed( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // source
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // link
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // language
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // copyright
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // pubDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RssFeed entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSource(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLink(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLanguage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCopyright(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPubDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RssFeed entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RssFeed entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
